// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`externals-loader does not use fallback for server 1`] = `
"  const rootModuleExternal = global.getTenantRootModule && global.getTenantRootModule().appConfig.providedExternals['lodash'];

  if (rootModuleExternal && require('holocron').validateExternal({
    providedVersion: rootModuleExternal.version,
    requestedRange: '^1.0.0'
  })) {
    try {
      module.exports = rootModuleExternal.module;
    } catch (error) {
      const errorGettingExternal = new Error('Failed to get external lodash from root module on the server', error.message);
      errorGettingExternal.shouldBlockModuleReload = false;
      throw errorGettingExternal;
    }
  } else {
    module.exports = require(\\"/Users/gkranev/Projects/one-amex/one-app-cli/test.js/lodash-tmp.js\\");
  }
"
`;

exports[`externals-loader returns content 1`] = `"This is some content!"`;

exports[`externals-loader should ignore the content and get the dependency from the root module 1`] = `
"try {
  const fallbackExternal = global.Holocron.getExternal({
    name: 'lodash',
    version: '4.17.21'
  });
  const rootModuleExternal = global.getTenantRootModule && global.getTenantRootModule().appConfig.providedExternals['lodash'];

  module.exports = fallbackExternal || (rootModuleExternal ? rootModuleExternal.module : () => {
    throw new Error('External not found: lodash');
  });
} catch (error) {
  const errorGettingExternal = new Error('Failed to get external fallback lodash');
  errorGettingExternal.shouldBlockModuleReload = false;
  throw errorGettingExternal;
}
"
`;
